#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <unistd.h>

#define WIDTH 75
#define HEIGHT 50

#define VECTORSIZE 2

const double G = 1.0;  // gravity constant

typedef struct {
    double x[VECTORSIZE];
} vector;

struct star
{
    double m;   // mass
    vector r;   // position_x
    vector v;  // velocity_x
};

struct star stars[] = {
    { 1.0, {{0.0, 10.0}}, {{0.0, 0.0}} },
    { 1.0, {{-10.0, 0.0}}, {{0.0, 0.0}} },
    { 1.0, {{0.0, -10.0}}, {{0.0, 0.0}} },
    { 1.0, {{10.0, 0.0}}, {{0.0, 0.0}} }
};


const int nstars = sizeof(stars) / sizeof(struct star);

void plot_stars(FILE *fp, const double t);
void update_velocities(const double dt);
void update_positions(const double dt);
vector add(const vector v1, const vector v2);
vector sub(const vector v1, const vector v2);
vector multi(const vector v, double k);
double norm(const vector v);
void print_vector(const vector *v);

void plot_stars(FILE *fp, const double t)
{
    int i;
    char space[WIDTH][HEIGHT];

    memset(space, ' ', sizeof(space));
    for (i = 0; i < nstars; i++) {
        const int x = WIDTH  / 2 + (int) stars[i].r.x[0];
        const int y = HEIGHT / 2 + (int) stars[i].r.x[1];
        if (x < 0 || x >= WIDTH)  continue;
        if (y < 0 || y >= HEIGHT) continue;
        char c = 'o';
        if (stars[i].m >= 1.0) c = 'O';
        space[x][y] = c;
    }

    int x, y;
    fprintf(fp, "----------\n");
    for (y = 0; y < HEIGHT; y++) {
        for (x = 0; x < WIDTH; x++)
            fputc(space[x][y], fp);
        fputc('\n', fp);
    }
    fflush(fp);

    printf("----t = %5.1f----\n", t);
    for (i = 0; i < nstars; i++) {
        printf("stars[%d]:\n\tr = ", i);
        print_vector(&stars[i].r);
        printf("\tv = ");
        print_vector(&stars[i].v);
        printf("\n");
    }
    printf("\n");
}

void update_velocities(const double dt)
{
    int i, j;
    for (i = 0; i < nstars; i++) {
        vector a = {{0.0, 0.0}}; //加速度

        for(j = 0; j < nstars; j++) {
            if(i == j)
                continue;
            vector gap;
            gap = sub(stars[j].r, stars[i].r);
            double distance = norm(gap);
            a = add(a, multi(gap, stars[j].m / pow(distance, 3)));
        }
        a = multi(a, G);

        stars[i].v = add(stars[i].v, multi(a, dt));
    }
}

void update_positions(const double dt)
{
    int i;
    vector vn[nstars];
    for(i = 0; i < nstars; i++) {
        vn[i] = stars[i].v;
    }
    update_velocities(dt);
    for (i = 0; i < nstars; i++) {
        stars[i].r = add(stars[i].r, multi(vn[i], dt));
    }
}

int main()
{
    const char *filename = "space.txt";
    FILE *fp;
    if ((fp = fopen(filename, "a")) == NULL) {
        fprintf(stderr, "error: cannot open %s.\n", filename);
        return 1;
    }

    const double dt = 1.0;
    const double stop_time = 400;

    int i;
    double t;
    for (i = 0, t = 0; t <= stop_time; i++, t += dt) {
        update_positions(dt);
        if (i % 10 == 0) {
            plot_stars(fp, t);
            usleep(200 * 1000);
        }
    }

    fclose(fp);

    return 0;
}

vector add(const vector v1, const vector v2) {
    vector result;
    for(int i = 0; i < VECTORSIZE; i++) {
        result.x[i] = v1.x[i] + v2.x[i];
    }

    return result;
}

vector sub(const vector v1, const vector v2) {
    vector result = add(v1, multi(v2, (-1)));
    return result;
}

vector multi(const vector v, double k) {
    vector result;
    for(int i = 0; i < VECTORSIZE; i++) {
        result.x[i] = v.x[i] * k;
    }

    return result;
}

double norm(const vector v) {
    double result = 0.0;
    for(int i = 0; i < VECTORSIZE; i++) {
        result += v.x[i] * v.x[i];
    }
    result = sqrt(result);
    return result;
}

void print_vector(const vector *v) {
    printf("(%7.2f", v->x[0]);
    for(int i = 1; i < VECTORSIZE; i++) {
        printf(", %7.2f", v->x[i]);
    }
    printf(")");
}
